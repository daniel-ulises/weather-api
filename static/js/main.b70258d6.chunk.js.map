{"version":3,"sources":["Components/Display/Display.jsx","Components/Search/Search.jsx","App.jsx","index.js"],"names":["Display","props","weather","message","length","className","cod","Date","toLocaleDateString","name","main","temp","description","src","icon","alt","Search","city","setCity","setWeather","setMessage","onSubmit","e","preventDefault","fetch","process","then","res","json","err","console","log","fetchData","target","reset","type","id","placeholder","onChange","value","class","onClick","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","App","useState","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAEe,SAASA,EAAQC,GAAQ,IAChCC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAsBhB,OACC,mCACEA,EAAQC,OAAS,EACjB,qBAAKC,UAAU,oBAAf,SACC,qBAAKA,UAAU,kBAAf,SACC,6BAAKF,QAGY,MAAhBD,EAAQI,IA1BZ,qBAAKD,UAAU,oBAAf,SACC,sBAAKA,UAAU,kBAAf,UACC,6BAAI,IAAIE,MAAOC,mBAAmB,WAClC,6BAAKN,EAAQO,OACb,uBAAMJ,UAAU,OAAhB,UAAwBH,EAAQQ,KAAKC,KAArC,YACA,sBAAMN,UAAU,aAAhB,SAA8BH,EAAQA,QAAQ,GAAGU,cACjD,+BACC,qBACCC,IAAG,4CAAuCX,EAAQA,QAAQ,GAAGY,KAA1D,WACHC,IAAI,eACJV,UAAU,wBAmBb,qBAAKA,UAAU,oBAAf,SACC,qBAAKA,UAAU,kBAAf,SACC,iFCpCS,SAASW,EAAOf,GAAQ,IAC/BgB,EAAyChB,EAAzCgB,KAAMC,EAAmCjB,EAAnCiB,QAASC,EAA0BlB,EAA1BkB,WAAYC,EAAcnB,EAAdmB,WAuElC,OACC,sBAAKf,UAAU,eAAf,UACC,sBAAMgB,SARa,SAAAC,GACpBA,EAAEC,iBA9De,WAEjBH,EAAW,cACX,IACCI,MAAM,qDAAD,OACiDP,EADjD,kBAC+DQ,mCAD/D,kBAGHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACW,MAAZA,EAAIrB,KACPc,EAAW,IACXD,EAAWQ,IAGXP,EAAW,0CAGb,MAAOS,GACRC,QAAQC,IAAgBF,IA6CzBG,GACAV,EAAEW,OAAOC,SAKR,SACC,uBACCC,KAAK,OACL1B,KAAK,SACL2B,GAAG,SACHC,YAAY,aACZC,SApBgB,SAAAhB,GACnBJ,EAAQI,EAAEW,OAAOM,YAsBhB,mBAAGC,MAAM,oCAAoCC,QArDrB,WACzBrB,EAAW,cAyBXsB,UAAUC,YAAYC,oBAxBN,SAAAC,GACf,IAAMC,EAAMD,EAASE,OAAOC,SACtBC,EAAMJ,EAASE,OAAOG,UAE5B,IACC1B,MAAM,uDAAD,OACmDsB,EADnD,gBAC8DG,EAD9D,kBAC2ExB,mCAD3E,kBAGHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACLP,EAAW,IACXD,EAAWQ,MAEZ,MAAOE,GACRC,QAAQC,IAAI,UAAWF,OAIX,WACbT,EACC,wF,MCjDW,SAAS+B,IAAO,IAAD,EACCC,mBAAS,IADV,mBACtBlD,EADsB,KACbiB,EADa,OAELiC,mBAAS,IAFJ,mBAEtBnC,EAFsB,KAEhBC,EAFgB,OAGCkC,mBAAS,sCAHV,mBAGtBjD,EAHsB,KAGbiB,EAHa,KAK7B,OACC,qCACC,oDACA,iCACC,cAACJ,EAAD,CACCC,KAAMA,EACNC,QAASA,EACTC,WAAYA,EACZC,WAAYA,IAEb,cAACpB,EAAD,CAASE,QAASA,EAASC,QAASA,OAErC,iCACC,mBACCkD,KAAK,+CACLpB,OAAO,SACPqB,IAAI,sBAHL,SAKC,mBAAGjD,UAAU,yBCxBlBkD,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAACN,EAAD,MAEDO,SAASC,eAAe,W","file":"static/js/main.b70258d6.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Display(props) {\n\tconst {weather, message} = props;\n\n\tconst renderSuccess = () => {\n\t\treturn (\n\t\t\t<div className=\"weather-container\">\n\t\t\t\t<div className=\"weather-display\">\n\t\t\t\t\t<p>{new Date().toLocaleDateString(\"es-ES\")}</p>\n\t\t\t\t\t<h2>{weather.name}</h2>\n\t\t\t\t\t<span className=\"temp\">{weather.main.temp} Â°C</span>\n\t\t\t\t\t<span className=\"wcondition\">{weather.weather[0].description}</span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n\t\t\t\t\t\t\talt=\"weather icon\"\n\t\t\t\t\t\t\tclassName=\"weather-icon\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{message.length > 1 ? (\n\t\t\t\t<div className=\"weather-container\">\n\t\t\t\t\t<div className=\"weather-display\">\n\t\t\t\t\t\t<h3>{message}</h3>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : weather.cod === 200 ? (\n\t\t\t\trenderSuccess()\n\t\t\t) : (\n\t\t\t\t<div className=\"weather-container\">\n\t\t\t\t\t<div className=\"weather-display\">\n\t\t\t\t\t\t<h3>City does not exist. Did you misspell it?</h3>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","import React from \"react\";\n\nexport default function Search(props) {\n\tconst {city, setCity, setWeather, setMessage} = props;\n\n\t// The function used to fetc the data from openweathermap also passing the\n\t// city we have typed into the search input\n\tconst fetchData = () => {\n\t\t// Display the message until the fetching is done\n\t\tsetMessage(\"Loading...\");\n\t\ttry {\n\t\t\tfetch(\n\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n\t\t\t)\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(res => {\n\t\t\t\t\tif (res.cod === 200) {\n\t\t\t\t\t\tsetMessage(\"\");\n\t\t\t\t\t\tsetWeather(res);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If the city requested does not exist, display this message\n\t\t\t\t\t\tsetMessage(\"City not found. Did you mispell it?\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log((\"error: \", err));\n\t\t}\n\t};\n\n\t// This function will handle the geolocation for retreiving your coordinates\n\t// and look up the city according to them using the Geolocation API\n\t// For more information https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API/Using_the_Geolocation_API\n\tconst handleGeoLocation = () => {\n\t\tsetMessage(\"Loading...\");\n\t\tconst success = position => {\n\t\t\tconst lat = position.coords.latitude;\n\t\t\tconst lon = position.coords.longitude;\n\n\t\t\ttry {\n\t\t\t\tfetch(\n\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n\t\t\t\t)\n\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t.then(res => {\n\t\t\t\t\t\tsetMessage(\"\");\n\t\t\t\t\t\tsetWeather(res);\n\t\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(\"Error: \", err);\n\t\t\t}\n\t\t};\n\n\t\tconst error = () => {\n\t\t\tsetMessage(\n\t\t\t\t\"Your geolocation is not enabled, or maybe your browser does not support it!\"\n\t\t\t);\n\t\t};\n\n\t\tnavigator.geolocation.getCurrentPosition(success, error);\n\t};\n\n\t// A simple function to handle the input from the searchbar\n\tconst handleValue = e => {\n\t\tsetCity(e.target.value);\n\t};\n\n\t// This will make a callback to the fetchData function in order to\n\t// display the city you searched for\n\tconst handleSubmit = e => {\n\t\te.preventDefault();\n\t\tfetchData();\n\t\te.target.reset();\n\t};\n\n\treturn (\n\t\t<div className=\"search-input\">\n\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"search\"\n\t\t\t\t\tid=\"search\"\n\t\t\t\t\tplaceholder=\"Enter city\"\n\t\t\t\t\tonChange={handleValue}\n\t\t\t\t/>\n\t\t\t</form>\n\t\t\t<i class=\"fas fa-map-marker-alt geolocation\" onClick={handleGeoLocation}></i>\n\t\t</div>\n\t);\n}\n","import React, {useState} from \"react\";\nimport Display from \"./Components/Display/Display\";\nimport Search from \"./Components/Search/Search\";\nimport \"./styles.css\";\n\nexport default function App() {\n\tconst [weather, setWeather] = useState([]);\n\tconst [city, setCity] = useState(\"\");\n\tconst [message, setMessage] = useState(\"Welcome to the simple weather app!\");\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Simple Weather App</h1>\n\t\t\t<main>\n\t\t\t\t<Search\n\t\t\t\t\tcity={city}\n\t\t\t\t\tsetCity={setCity}\n\t\t\t\t\tsetWeather={setWeather}\n\t\t\t\t\tsetMessage={setMessage}\n\t\t\t\t/>\n\t\t\t\t<Display weather={weather} message={message} />\n\t\t\t</main>\n\t\t\t<footer>\n\t\t\t\t<a\n\t\t\t\t\thref=\"https://github.com/daniel-ulises/weather-app\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\t<i className=\"fab fa-github\"></i>\n\t\t\t\t</a>\n\t\t\t</footer>\n\t\t</>\n\t);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}